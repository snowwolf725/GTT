package Calculator;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.math.BigInteger;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.LineBorder;

/*
 * Calculator.java
 *
 * Created on 2003年10月17日, 下午 12:52
 * update by ZWS 20051230
 * update by David Wu 20070525
 */

/**
 * This code was edited or generated using CloudGarden's Jigloo SWT/Swing GUI
 * Builder, which is free for non-commercial use. If Jigloo is being used
 * commercially (ie, by a corporation, company or business for any purpose
 * whatever) then you should purchase a license for each developer using Jigloo.
 * Please visit www.cloudgarden.com for details. Use of Jigloo implies
 * acceptance of these licensing terms. A COMMERCIAL LICENSE HAS NOT BEEN
 * PURCHASED FOR THIS MACHINE, SO JIGLOO OR THIS CODE CANNOT BE USED LEGALLY FOR
 * ANY CORPORATE OR COMMERCIAL PURPOSE.
 */
public class Calculator extends JFrame {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private final static int NO_OP = 0;

	private final static int ADD = 1;

	private final static int SUB = 2;

	private final static int MUTIPLY = 3;

	private final static int DIVIDE = 4;

	private BigInteger m_inputNum;

	private BigInteger m_LeftHand;

	private BigInteger m_RightHand;

	private BigInteger m_memory;

	private int m_op;

	private JPanel m_Panel1;

	private JPanel m_Panel2;

	private JButton m_BackBtn;

	private JButton m_CEBtn;

	private JButton m_MCBtn;

	private JButton m_DotBtn;

	private JButton m_InvBtn;

	private JButton m_MPlus;

	private JButton m_MRBtn;

	private JButton m_MSBtn;

	private JButton m_AddBtn;

	private JButton m_SubBtn;

	private JButton m_MultiplyBtn;

	private JButton m_DivideBtn;

	private JButton m_EqualBtn;

	private JButton m_Num0;

	private JButton m_Num1;

	private JButton m_Num2;

	private JButton m_Num3;

	private JButton m_Num4;

	private JButton m_Num5;

	private JButton m_Num6;

	private JButton m_Num7;

	private JButton m_Num8;

	private JButton m_Num9;

	private JLabel m_MemLabel;

	private JTextField m_ResultText;

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		if (args.length == 0)
			create().setVisible(true);
		else
			create(args[0]).setVisible(true);
	}

	public static Calculator create() {
		return new Calculator("DEFAULT");
	}

	public static Calculator create(String arg) {
		return new Calculator(arg);
	}

	/** Creates new form Calculator */
	private static final int LAYOUT_DEFAULT = 0;

	private static final int LAYOUT_CHANGED = 1;

	private static final int AUT_CHANGED = 2;

	private int m_layout = LAYOUT_DEFAULT;

	public Calculator(String changed) {
		if (changed.indexOf("LayoutChanged") != -1) {
			m_layout = LAYOUT_CHANGED;
		} else if (changed.indexOf("AutChanged") != -1) {
			m_layout = AUT_CHANGED;
		} else {
			m_layout = LAYOUT_DEFAULT;
		}
		initComponents();
		initComponentsName();
		initByManual();
	}

	public void initByManual() {
		m_inputNum = new BigInteger("0");
		m_memory = new BigInteger("0");
		m_LeftHand = new BigInteger("0");
		m_RightHand = new BigInteger("0");
		m_op = NO_OP;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	private void initComponents() {
		constructorComponents();

		setTitle("Calculator");

		getContentPane().setLayout(null);
		setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(WindowEvent evt) {
				exitForm(evt);
			}
		});

		m_Panel1.setLayout(null);
		m_Panel2.setLayout(null);

		initResultComponent();
		initNumericButton();
		initFunComponent();
	}

	private void constructorComponents() {
		m_Panel1 = new JPanel();
		m_Panel2 = new JPanel();
		m_ResultText = new JTextField();
		m_Num1 = new JButton();
		m_Num2 = new JButton();
		m_Num3 = new JButton();
		m_Num4 = new JButton();
		m_Num5 = new JButton();
		m_Num6 = new JButton();
		m_Num7 = new JButton();
		m_Num8 = new JButton();
		m_Num9 = new JButton();
		m_Num0 = new JButton();
		m_InvBtn = new JButton();
		m_DotBtn = new JButton();
		m_AddBtn = new JButton();
		m_SubBtn = new JButton();
		m_MultiplyBtn = new JButton();
		m_DivideBtn = new JButton();
		m_MemLabel = new JLabel();
		m_MCBtn = new JButton();
		m_MRBtn = new JButton();
		m_MSBtn = new JButton();
		m_MPlus = new JButton();
		m_BackBtn = new JButton();
		m_EqualBtn = new JButton();
		m_CEBtn = new JButton();
		m_ResultText.addPropertyChangeListener(new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent arg0) {
				System.out.println(arg0.toString());
			}

		});
	}

	public void initComponentsName() {
		m_Panel1.setName("panel 1");
		m_Panel2.setName("panel 2");
		m_ResultText.setName("result");
		m_ResultText.addPropertyChangeListener(new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent arg0) {
				System.out.println(arg0.toString());
			}

		});

		m_Num0.setName("0");
		m_Num1.setName("1");
		m_Num2.setName("2");
		m_Num3.setName("3");
		m_Num4.setName("4");
		m_Num5.setName("5");
		m_Num6.setName("6");
		m_Num7.setName("7");
		m_Num8.setName("8");
		m_Num9.setName("9");

		m_InvBtn.setName("invert");
		m_DotBtn.setName("dot");
		m_AddBtn.setName("add");
		m_SubBtn.setName("sub");
		m_MultiplyBtn.setName("multiply");
		m_DivideBtn.setName("divide");
		m_EqualBtn.setName("equal");
		m_MemLabel.setName("memoryLabel");
		m_MCBtn.setName("MC");
		m_MRBtn.setName("MR");
		m_MSBtn.setName("MS");
		m_MPlus.setName("MPlus");
		m_BackBtn.setName("Backspace");
		m_CEBtn.setName("CE");
		this.setSize(350, 350);
	}

	private void initFunComponent() {
		m_InvBtn.setText("inv");
		m_InvBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				InvertActionPerformed(evt);
			}
		});

		m_Panel2.add(m_InvBtn);
		m_InvBtn.setBounds(70, 160, 50, 40);

		m_AddBtn.setText("+");
		m_AddBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				operatorActionPerformed(evt, ADD);
			}
		});

		m_Panel2.add(m_AddBtn);
		m_AddBtn.setBounds(190, 10, 50, 40);

		m_SubBtn.setText("-");
		m_SubBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				operatorActionPerformed(evt, SUB);
			}
		});

		m_Panel2.add(m_SubBtn);
		m_SubBtn.setBounds(190, 60, 50, 40);

		m_MultiplyBtn.setText("*");
		m_MultiplyBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				operatorActionPerformed(evt, MUTIPLY);
			}
		});

		m_Panel2.add(m_MultiplyBtn);
		m_MultiplyBtn.setBounds(190, 110, 50, 40);

		m_DivideBtn.setText("/");
		m_DivideBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				operatorActionPerformed(evt, DIVIDE);
			}
		});

		m_Panel2.add(m_DivideBtn);
		m_DivideBtn.setBounds(190, 160, 50, 40);

		m_Panel1.add(m_Panel2);
		m_Panel2.setBounds(70, 90, 250, 210);

		m_MemLabel.setHorizontalAlignment(SwingConstants.CENTER);
		m_MemLabel.setBorder(new LineBorder(new Color(0, 0, 0)));
		m_Panel1.add(m_MemLabel);
		m_MemLabel.setBounds(10, 50, 40, 40);

		m_MCBtn.setText("MC");
		m_MCBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				CLActionPerformed(evt);
			}
		});

		m_Panel1.add(m_MCBtn);
		m_MCBtn.setBounds(10, 100, 60, 40);

		m_MRBtn.setText("MR");
		m_MRBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				REActionPerformed(evt);
			}
		});

		m_Panel1.add(m_MRBtn);
		m_MRBtn.setBounds(10, 150, 60, 40);

		m_MSBtn.setText("MS");
		m_MSBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				SEActionPerformed(evt);
			}
		});

		m_Panel1.add(m_MSBtn);
		m_MSBtn.setBounds(10, 200, 60, 40);

		m_MPlus.setText("M+");
		m_MPlus.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				MPlusActionPerformed(evt);
			}
		});

		m_Panel1.add(m_MPlus);
		m_MPlus.setBounds(10, 250, 60, 40);

		m_BackBtn.setText("Backspace");
		m_BackBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				BackspaceActionPerformed(evt);
			}
		});

		m_Panel1.add(m_BackBtn);
		m_BackBtn.setBounds(80, 50, 110, 40);

		m_EqualBtn.setText("=");
		m_EqualBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jButtonEqualActionPerformed(evt);
			}
		});

		m_Panel1.add(m_EqualBtn);
		m_EqualBtn.setBounds(260, 50, 50, 40);

		m_CEBtn.setText("CE");
		m_CEBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				CEActionPerformed(evt);
			}
		});

		m_Panel1.add(m_CEBtn);
		m_CEBtn.setBounds(200, 50, 50, 40);

		getContentPane().add(m_Panel1);
		m_Panel1.setBounds(0, 0, 370, 320);

		java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit()
				.getScreenSize();
		setBounds((screenSize.width - 320) / 2, (screenSize.height - 350) / 2,
				320, 350);
		m_ResultText.addPropertyChangeListener(new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent arg0) {
				System.out.println(arg0.toString());
			}

		});
	}

	private void initResultComponent() {
		m_ResultText.setHorizontalAlignment(JTextField.RIGHT);
		m_ResultText.addPropertyChangeListener(new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent arg0) {
				System.out.println(arg0.toString());
			}

		});
		m_ResultText.setText("0.");
		m_ResultText.setEditable(false);
		m_ResultText.setBackground(new Color(255, 255, 255));
		m_Panel1.add(m_ResultText);
		m_ResultText.setBounds(10, 10, 300, 30);
	}

	private void initNumericButton() {
		m_Num1.setText("1");
		m_Num1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				NumActionPerformed(evt, 1);
			}
		});

		m_Num2.setText("2");
		m_Num2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				NumActionPerformed(evt, 2);
			}
		});
		
		if (m_layout == LAYOUT_DEFAULT) {
			// btn 1, 2 正常
			m_Panel2.add(m_Num1);
			m_Num1.setBounds(10, 10, 50, 40);
			m_Panel2.add(m_Num2);
			m_Num2.setBounds(70, 10, 50, 40);
		} else if(m_layout == AUT_CHANGED) {
			// 只有btn 2
			m_Panel2.add(m_Num2);
			m_Num2.setBounds(70, 10, 50, 40);
		} else if(m_layout == LAYOUT_CHANGED) {
			// btn 1,2 調換位置
			m_Panel2.add(m_Num1);
			m_Num1.setBounds(70, 10, 50, 40);
			m_Panel2.add(m_Num2);
			m_Num2.setBounds(10, 10, 50, 40);
		}

		m_Num3.setText("3");
		m_Num3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				NumActionPerformed(evt, 3);
			}
		});

		m_Panel2.add(m_Num3);
		m_Num3.setBounds(130, 10, 50, 40);
		m_Num4.setText("4");
		m_Num4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				NumActionPerformed(evt, 4);
			}
		});

		m_Panel2.add(m_Num4);
		m_Num4.setBounds(10, 60, 50, 40);

		m_Num5.setText("5");
		m_Num5.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				NumActionPerformed(evt, 5);
			}
		});

		m_Panel2.add(m_Num5);
		m_Num5.setBounds(70, 60, 50, 40);

		m_Num6.setText("6");
		m_Num6.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				NumActionPerformed(evt, 6);
			}
		});

		m_Panel2.add(m_Num6);
		m_Num6.setBounds(130, 60, 50, 40);

		m_Num7.setText("7");
		m_Num7.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				NumActionPerformed(evt, 7);
			}
		});

		m_Panel2.add(m_Num7);
		m_Num7.setBounds(10, 110, 50, 40);

		m_Num8.setText("8");
		m_Num8.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				NumActionPerformed(evt, 8);
			}
		});

		m_Panel2.add(m_Num8);
		m_Num8.setBounds(70, 110, 50, 40);

		m_Num9.setText("9");
		m_Num9.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				NumActionPerformed(evt, 9);
			}
		});

		m_Panel2.add(m_Num9);
		m_Num9.setBounds(130, 110, 50, 40);

		m_Num0.setText("0");
		m_Num0.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				NumActionPerformed(evt, 0);
			}
		});

		m_Panel2.add(m_Num0);
		m_Num0.setBounds(10, 160, 50, 40);
	}

	public void CEActionPerformed(ActionEvent evt) {
		m_inputNum = new BigInteger("0");
		m_LeftHand = new BigInteger("0");
		m_RightHand = new BigInteger("0");
		m_op = NO_OP;
		m_ResultText.setText("0.");
	}

	public void SEActionPerformed(ActionEvent evt) {
		String content = m_ResultText.getText();
		m_memory = new BigInteger(content.substring(0, content.length() - 1));
		m_inputNum = new BigInteger("0");
		setMemoryLable();
	}

	public void MPlusActionPerformed(ActionEvent evt) {
		String content = m_ResultText.getText();
		m_memory = m_memory.add(new BigInteger(content.substring(0, content.length() - 1)));
		m_inputNum = new BigInteger("0");
		setMemoryLable();
	}

	public void REActionPerformed(ActionEvent evt) {
		m_ResultText.setText(m_memory + ".");
		m_inputNum = new BigInteger("0");
		setMemoryLable();
	}

	// public void jButtonAddActionPerformed( ActionEvent evt )
	// {
	// m_LeftHand = compute( m_LeftHand, m_inputNum );
	// m_ResultText.setText( m_LeftHand + "." );
	// m_inputNum = new BigInteger( "0" );
	// m_op = 1;
	// }
	//
	// public void jButtonSubActionPerformed( ActionEvent evt )
	// {
	// m_LeftHand = compute( m_LeftHand, m_inputNum );
	// m_ResultText.setText( m_LeftHand + "." );
	// m_inputNum = new BigInteger( "0" );
	// m_op = 2;
	// }
	//	
	// public void jButtonMultiplyActionPerformed( ActionEvent evt )
	// {
	// m_LeftHand = compute( m_LeftHand, m_inputNum );
	// m_ResultText.setText( m_LeftHand + "." );
	// m_inputNum = new BigInteger( "0" );
	// m_op = 3;
	// }
	//	
	// public void jButtonDivideActionPerformed( ActionEvent evt )
	// {
	// m_LeftHand = compute( m_LeftHand, m_inputNum );
	// m_ResultText.setText( m_LeftHand.toString() + "." );
	// m_inputNum = new BigInteger( "0" );
	// m_op = 4;
	// }

	public void operatorActionPerformed(ActionEvent evt, int op) {
		m_LeftHand = compute(m_LeftHand, m_inputNum);
		m_ResultText.setText(m_LeftHand + ".");
		m_inputNum = new BigInteger("0");
		m_op = op;
	}

	public void jButtonEqualActionPerformed(ActionEvent evt) {
		m_LeftHand = compute(m_LeftHand, m_RightHand);
		m_ResultText.setText(m_LeftHand.toString() + ".");
		m_inputNum = new BigInteger("0");
	}

	public void InvertActionPerformed(ActionEvent evt) {
		String content = m_ResultText.getText();

		if (content.equals("0.") == true)
			return;

		if (content.charAt(0) != '-')
			m_inputNum = new BigInteger("-"
					+ content.substring(0, content.length() - 1));
		else
			m_inputNum = new BigInteger(content.substring(1,
					content.length() - 1));

		m_ResultText.setText(m_inputNum.toString() + ".");
		m_RightHand = m_inputNum;
	}

	public void BackspaceActionPerformed(ActionEvent evt) {
		String content = m_ResultText.getText();
		String number = content.substring(0, content.length() - 1);

//		if (m_LeftHand.toString().equals(number) == true)
//			return;
//		else 
		if (number.length() > 1)
		{
			if(number.length() == 2 && number.charAt( 0 ) == '-')
				m_inputNum = new BigInteger("0");
			else
			    m_inputNum = new BigInteger(number.substring(0, number.length() - 1));
		}
		else
			m_inputNum = new BigInteger("0");

		m_ResultText.setText(m_inputNum.toString() + ".");
		m_RightHand = m_inputNum;
	}

	public void NumActionPerformed(ActionEvent evt, int num) {
		String inputDigit = "" + num;

		if (m_inputNum.toString().charAt(0) == '0')
			m_inputNum = m_inputNum.shiftLeft(1);

		m_inputNum = m_inputNum.multiply(new BigInteger("10"));
		m_inputNum = m_inputNum.add(new BigInteger(inputDigit));
		m_ResultText.setText(m_inputNum + ".");
		m_RightHand = m_inputNum;
	}

	public void CLActionPerformed(ActionEvent evt) {
		m_memory = new BigInteger("0");
		setMemoryLable();
	}

	/** Exit the Application */
	public void exitForm(WindowEvent evt) {
		this.dispose();
	}

	private void setMemoryLable() {
		if (m_memory.toString().equals("0") == false)
			m_MemLabel.setText("M");
		else
			m_MemLabel.setText("");
	}

	private BigInteger compute(BigInteger lefthand, BigInteger righthand) {
		if (m_op == 1)
			return lefthand.add(righthand);
		else if (m_op == 2)
			return lefthand.subtract(righthand);
		else if (m_op == 3)
			return lefthand.multiply(righthand);
		else if (m_op == 4)
			return lefthand.divide(righthand);
		// else if ( m_op == 0 && m_LeftHand == 0 )
		// return lefthand + righthand;
		else
			return righthand;
	}

}
